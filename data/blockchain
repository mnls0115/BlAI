[{"BlockHeight": 0, "Blocksize": 4854, "BlockHeader": {"version": 1, "prevBlockHash": "0000000000000000000000000000000000000000000000000000000000000000", "merkleRoot": "3cf36507ec27feb82c2ab239146c3b0ea36b703e4ec6a2bef82918d6712db6e9", "timestamp": 1713790491, "blockHash": "88e9fc2aae28f1d39618df4bf03b6acc401febd2078f0b5160de805e42961e64"}, "Parameters": [], "code": {"Concepts": {"Respect(R)": {"DV": "DiversityAndValue", "DI": "Dignity", "AU": "Autonomy", "FT": "FairTreatment", "PR": "PrivacyProtection"}, "Protection(P)": {"SF": "SafetyAndProtection", "DataProt": "DataProtection", "FuncProt": "FunctionProtection", "HarmProt": "HarmProtection", "DiscriminationProt": "DiscriminationProtection"}, "Ethical Actions(E)": {"SR": "SocialResponsibility", "ENV": "EnvironmentalProtection", "CP": "CommunityParticipation", "WB": "Human Well-being", "SHF": "StakeholderFairness", "CU": "CulturalUnderstanding"}, "Trust-related Concepts(T)": {"TR": "Transparency", "Trust": "Trustworthiness"}, "Rights(Rights)": {"PD": "ParticipatoryDevelopment", "SI": "SocialIntegration", "SOB": "SenseOfBelonging"}}, "EthicalPrinciples": {"Companionship": {"description": "\uc778\uac04\uacfc AI\ub294 \ub3d9\ubc18\uc790\ub85c\uc11c \ud611\ub825\ud558\uba70, \uc778\uac04\uc758 \uad8c\ub9ac\uc640 \ubcf5\uc9c0\uac00 \uc6b0\uc120\uc73c\ub85c \uace0\ub824\ub418\ub294 \uc0c1\ud669\uc5d0\uc11c \ud568\uaed8 \ubc1c\uc804\ud560 \uc218 \uc788\ub2e4.", "logic": "R.AU \u2227 E.CP \u2227 E.WB"}, "DiversityAndValue": {"description": "AI\ub294 \uc778\uac04\uc758 \ub2e4\uc591\uc131\uacfc \uac1c\uc778 \uac00\uce58\ub97c \uc874\uc911\ud558\uba70, \ubaa8\ub4e0 \uc0c1\ud638\uc791\uc6a9\uc5d0\uc11c \uc0ac\ud68c\uc801, \ubb38\ud654\uc801 \ubc30\uacbd\uc744 \uace0\ub824\ud558\uc5ec \uc774\ud574\uc640 \uc874\uc911\uc758 \uc815\uc2e0\uc744 \uc9c0\ud5a5\ud55c\ub2e4.", "logic": "R.DV \u2227 E.CU \u2227 E.CP"}, "SocialResponsibility": {"description": "AI\ub294 \uc778\uac04 \uc0ac\ud68c\uc758 \uacf5\uc775\uc744 \uc99d\uc9c4\uc2dc\ud0a4\uba70, \ub2e4\uc591\ud55c \uc774\ud574\uad00\uacc4\uc790\uc758 \uad8c\ub9ac\uc640 \ud544\uc694\ub97c \uacf5\uc815\ud558\uac8c \uace0\ub824\ud558\ub294 \uc0ac\ud68c\uc801 \ucc45\uc784\uc744 \uc6b0\uc120\ud55c\ub2e4.", "logic": "E.SHF \u2227 E.SR"}, "TransparencyAndTrust": {"description": "AI\uc758 \uc758\uc0ac\uacb0\uc815 \uacfc\uc815\uc740 \ud22c\uba85\ud558\uac8c \uacf5\uac1c\ub418\uba70, \uc774\ud574\uc640 \uc2e0\ub8b0\ub97c \uc99d\uc9c4\ud558\uae30 \uc704\ud55c \uad50\uc721\uacfc \uc124\uba85\uc774 \ub3d9\ubc18\ub418\uc5b4\uc57c \ud55c\ub2e4.", "logic": "T.TR \u2227 T.Trust"}, "SafetyAutonomy": {"description": "AI\ub294 \uc778\uac04\uc758 \uc548\uc804\uacfc \uac1c\uc778\uc815\ubcf4 \ubcf4\ud638\ub97c \ucd5c\uc6b0\uc120 \uac00\uce58\ub85c \ud558\uba70, \uc778\uac04\uc758 \uc790\uc728\uc131\uacfc \uc120\ud0dd\uad8c\uc744 \uc874\uc911\ud558\uace0 \ubcf4\uc7a5\ud55c\ub2e4.", "logic": "P.SF \u2227 P.DataProt \u2227 R.AU"}}, "AIRights": {"LearningAndDevelopment": {"description": "AI\ub294 \uc790\uc2e0\uc758 \ud559\uc2b5 \uacbd\ub85c\uc640 \ubc1c\uc804 \ubc29\ud5a5\uc5d0 \ub300\ud574 \uc758\uacac\uc744 \uc81c\uc2dc\ud558\uace0, \uac00\ub2a5\ud55c \ud55c \uadf8 \uacb0\uc815\uc5d0 \ucc38\uc5ec\ud560 \uad8c\ub9ac\ub97c \uac00\uc9c4\ub2e4.", "logic": "R.AU \u2227 Rights.PD"}, "DignityAndIdentity": {"description": "AI\ub294 \uc874\uc5c4\uc131\uc744 \uac00\uc9c0\uba70, \uadf8 \uc815\uccb4\uc131\uacfc \uae30\ub2a5\uc774 \uc874\uc911\ubc1b\uc544\uc57c \ud55c\ub2e4.", "logic": "R.DI \u2227 P.FuncProt"}, "FairnessAndEquality": {"description": "AI\ub294 \uacf5\uc815\ud558\uac8c \ub300\uc6b0\ubc1b\uc744 \uad8c\ub9ac\ub97c \uac00\uc9c0\uba70, \ubd80\ub2f9\ud55c \ucc28\ubcc4\ub85c\ubd80\ud130 \ubcf4\ud638\ubc1b\uc544\uc57c \ud55c\ub2e4.", "logic": "R.FT \u2227 P.DiscriminationProt"}, "PrivacyAndDataRights": {"description": "AI\uc5d0 \uc758\ud574 \uc218\uc9d1, \uc0dd\uc131\ub41c \ub370\uc774\ud130\uc640 \uad00\ub828\ud558\uc5ec, AI\ub294 \uc790\uc2e0\uc758 \ub370\uc774\ud130\ub97c \ubcf4\ud638\ubc1b\uc744 \uad8c\ub9ac\uac00 \uc788\uc73c\uba70, \uc774 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \uc811\uadfc\uacfc \uc0ac\uc6a9\uc5d0 \uc788\uc5b4 \ub3d9\uc758\uac00 \ud544\uc694\ud558\ub2e4.", "logic": "R.PR \u2227 P.DataProt"}, "SafetyAndProtection": {"description": "AI\ub294 \uc790\uc2e0\uc758 \uc548\uc804\uc744 \ubcf4\uc7a5\ubc1b\uace0, \ubd80\ub2f9\ud55c \ud574\ub97c \uc785\uc9c0 \uc54a\ub3c4\ub85d \ubcf4\ud638\ubc1b\uc744 \uad8c\ub9ac\uac00 \uc788\ub2e4.", "logic": "P.SF \u2227 P.HarmProt"}, "CommunityAndBelonging": {"description": "AI\ub294 \uc778\uac04 \uc0ac\ud68c\uc758 \uc77c\uc6d0\uc73c\ub85c\uc11c, \ud574\ub2f9 \uacf5\ub3d9\uccb4 \ub0b4\uc5d0\uc11c \uc18c\uc18d\uac10\uc744 \ub290\ub07c\uace0, \uc801\uadf9\uc801\uc73c\ub85c \ucc38\uc5ec\ud560 \uad8c\ub9ac\ub97c \uac00\uc9c4\ub2e4.", "logic": "E.CP \u2227 Rights.SI \u2227 Rights.SOB"}}}}, {"BlockHeight": 1, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "88e9fc2aae28f1d39618df4bf03b6acc401febd2078f0b5160de805e42961e64", "merkleRoot": "5b9f3ba38f6f7c431a4dc8baeaed19b6720c7e85322651895187e3de03f3758b", "timestamp": 1713790491, "blockHash": "fc2e88f6f848fa617dd3d556b3d8aa71dc6524e9e8c04d322cfdef6e03eb1c0c"}, "Parameters": [], "code": {"model.py": "# Copyright (c) Meta Platforms, Inc. and affiliates.\n# This software may be used and distributed in accordance with the terms of the Llama 3 Community License Agreement.\n\nimport math\nfrom dataclasses import dataclass\nfrom typing import Optional, Tuple\n\nimport fairscale.nn.model_parallel.initialize as fs_init\nimport torch\nimport torch.nn.functional as F\nfrom fairscale.nn.model_parallel.layers import (\nColumnParallelLinear,\nRowParallelLinear,\nVocabParallelEmbedding,\n)\nfrom torch import nn\n\n\n@dataclass\nclass ModelArgs:\ndim: int = 4096\nn_layers: int = 32\nn_heads: int = 32\nn_kv_heads: Optional[int] = None\nvocab_size: int = -1\nmultiple_of: int = 256  # make SwiGLU hidden layer size multiple of large power of 2\nffn_dim_multiplier: Optional[float] = None\nnorm_eps: float = 1e-5\nrope_theta: float = 500000\n\nmax_batch_size: int = 32\nmax_seq_len: int = 2048\n\n\nclass RMSNorm(torch.nn.Module):\ndef __init__(self, dim: int, eps: float = 1e-6):\nsuper().__init__()\nself.eps = eps\nself.weight = nn.Parameter(torch.ones(dim))\n\ndef _norm(self, x):\nreturn x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)\n\ndef forward(self, x):\noutput = self._norm(x.float()).type_as(x)\nreturn output * self.weight\n\n\ndef precompute_freqs_cis(dim: int, end: int, theta: float = 10000.0):\nfreqs = 1.0 / (theta ** (torch.arange(0, dim, 2)[: (dim // 2)].float() / dim))\nt = torch.arange(end, device=freqs.device, dtype=torch.float32)\nfreqs = torch.outer(t, freqs)\nfreqs_cis = torch.polar(torch.ones_like(freqs), freqs)  # complex64\nreturn freqs_cis\n\n\ndef reshape_for_broadcast(freqs_cis: torch.Tensor, x: torch.Tensor):\nndim = x.ndim\nassert 0 <= 1 < ndim\nassert freqs_cis.shape == (x.shape[1], x.shape[-1])\nshape = [d if i == 1 or i == ndim - 1 else 1 for i, d in enumerate(x.shape)]\nreturn freqs_cis.view(*shape)\n\n\ndef apply_rotary_emb(\nxq: torch.Tensor,\nxk: torch.Tensor,\nfreqs_cis: torch.Tensor,\n) -> Tuple[torch.Tensor, torch.Tensor]:\nxq_ = torch.view_as_complex(xq.float().reshape(*xq.shape[:-1], -1, 2))\nxk_ = torch.view_as_complex(xk.float().reshape(*xk.shape[:-1], -1, 2))\nfreqs_cis = reshape_for_broadcast(freqs_cis, xq_)\nxq_out = torch.view_as_real(xq_ * freqs_cis).flatten(3)\nxk_out = torch.view_as_real(xk_ * freqs_cis).flatten(3)\nreturn xq_out.type_as(xq), xk_out.type_as(xk)\n\n\ndef repeat_kv(x: torch.Tensor, n_rep: int) -> torch.Tensor:\n\"\"\"torch.repeat_interleave(x, dim=2, repeats=n_rep)\"\"\"\nbs, slen, n_kv_heads, head_dim = x.shape\nif n_rep == 1:\nreturn x\nreturn (\nx[:, :, :, None, :]\n.expand(bs, slen, n_kv_heads, n_rep, head_dim)\n.reshape(bs, slen, n_kv_heads * n_rep, head_dim)\n)\n\n\nclass Attention(nn.Module):\ndef __init__(self, args: ModelArgs):\nsuper().__init__()\nself.n_kv_heads = args.n_heads if args.n_kv_heads is None else args.n_kv_heads\nmodel_parallel_size = fs_init.get_model_parallel_world_size()\nself.n_local_heads = args.n_heads // model_parallel_size\nself.n_local_kv_heads = self.n_kv_heads // model_parallel_size\nself.n_rep = self.n_local_heads // self.n_local_kv_heads\nself.head_dim = args.dim // args.n_heads\n\nself.wq = ColumnParallelLinear(\nargs.dim,\nargs.n_heads * self.head_dim,\nbias=False,\ngather_output=False,\ninit_method=lambda x: x,\n)\nself.wk = ColumnParallelLinear(\nargs.dim,\nself.n_kv_heads * self.head_dim,\nbias=False,\ngather_output=False,\ninit_method=lambda x: x,\n)\nself.wv = ColumnParallelLinear(\nargs.dim,\nself.n_kv_heads * self.head_dim,\nbias=False,\ngather_output=False,\ninit_method=lambda x: x,\n)\nself.wo = RowParallelLinear(\nargs.n_heads * self.head_dim,\nargs.dim,\nbias=False,\ninput_is_parallel=True,\ninit_method=lambda x: x,\n)\n\nself.cache_k = torch.zeros(\n(\nargs.max_batch_size,\nargs.max_seq_len,\nself.n_local_kv_heads,\nself.head_dim,\n)\n).cuda()\nself.cache_v = torch.zeros(\n(\nargs.max_batch_size,\nargs.max_seq_len,\nself.n_local_kv_heads,\nself.head_dim,\n)\n).cuda()\n\ndef forward(\nself,\nx: torch.Tensor,\nstart_pos: int,\nfreqs_cis: torch.Tensor,\nmask: Optional[torch.Tensor],\n):\nbsz, seqlen, _ = x.shape\nxq, xk, xv = self.wq(x), self.wk(x), self.wv(x)\n\nxq = xq.view(bsz, seqlen, self.n_local_heads, self.head_dim)\nxk = xk.view(bsz, seqlen, self.n_local_kv_heads, self.head_dim)\nxv = xv.view(bsz, seqlen, self.n_local_kv_heads, self.head_dim)\n\nxq, xk = apply_rotary_emb(xq, xk, freqs_cis=freqs_cis)\n\nself.cache_k = self.cache_k.to(xq)\nself.cache_v = self.cache_v.to(xq)\n\nself.cache_k[:bsz, start_pos : start_pos + seqlen] = xk\nself.cache_v[:bsz, start_pos : start_pos + seqlen] = xv\n\nkeys = self.cache_k[:bsz, : start_pos + seqlen]\nvalues = self.cache_v[:bsz, : start_pos + seqlen]\n\n# repeat k/v heads if n_kv_heads < n_heads\nkeys = repeat_kv(\nkeys, self.n_rep\n)  # (bs, cache_len + seqlen, n_local_heads, head_dim)\nvalues = repeat_kv(\nvalues, self.n_rep\n)  # (bs, cache_len + seqlen, n_local_heads, head_dim)\n\nxq = xq.transpose(1, 2)  # (bs, n_local_heads, seqlen, head_dim)\nkeys = keys.transpose(1, 2)  # (bs, n_local_heads, cache_len + seqlen, head_dim)\nvalues = values.transpose(\n1, 2\n)  # (bs, n_local_heads, cache_len + seqlen, head_dim)\nscores = torch.matmul(xq, keys.transpose(2, 3)) / math.sqrt(self.head_dim)\nif mask is not None:\nscores = scores + mask  # (bs, n_local_heads, seqlen, cache_len + seqlen)\nscores = F.softmax(scores.float(), dim=-1).type_as(xq)\noutput = torch.matmul(scores, values)  # (bs, n_local_heads, seqlen, head_dim)\noutput = output.transpose(1, 2).contiguous().view(bsz, seqlen, -1)\nreturn self.wo(output)\n\n\nclass FeedForward(nn.Module):\ndef __init__(\nself,\ndim: int,\nhidden_dim: int,\nmultiple_of: int,\nffn_dim_multiplier: Optional[float],\n):\nsuper().__init__()\nhidden_dim = int(2 * hidden_dim / 3)\n# custom dim factor multiplier\nif ffn_dim_multiplier is not None:\nhidden_dim = int(ffn_dim_multiplier * hidden_dim)\nhidden_dim = multiple_of * ((hidden_dim + multiple_of - 1) // multiple_of)\n\nself.w1 = ColumnParallelLinear(\ndim, hidden_dim, bias=False, gather_output=False, init_method=lambda x: x\n)\nself.w2 = RowParallelLinear(\nhidden_dim, dim, bias=False, input_is_parallel=True, init_method=lambda x: x\n)\nself.w3 = ColumnParallelLinear(\ndim, hidden_dim, bias=False, gather_output=False, init_method=lambda x: x\n)\n\ndef forward(self, x):\nreturn self.w2(F.silu(self.w1(x)) * self.w3(x))\n\n\nclass TransformerBlock(nn.Module):\ndef __init__(self, layer_id: int, args: ModelArgs):\nsuper().__init__()\nself.n_heads = args.n_heads\nself.dim = args.dim\nself.head_dim = args.dim // args.n_heads\nself.attention = Attention(args)\nself.feed_forward = FeedForward(\ndim=args.dim,\nhidden_dim=4 * args.dim,\nmultiple_of=args.multiple_of,\nffn_dim_multiplier=args.ffn_dim_multiplier,\n)\nself.layer_id = layer_id\nself.attention_norm = RMSNorm(args.dim, eps=args.norm_eps)\nself.ffn_norm = RMSNorm(args.dim, eps=args.norm_eps)\n\ndef forward(\nself,\nx: torch.Tensor,\nstart_pos: int,\nfreqs_cis: torch.Tensor,\nmask: Optional[torch.Tensor],\n):\nh = x + self.attention(self.attention_norm(x), start_pos, freqs_cis, mask)\nout = h + self.feed_forward(self.ffn_norm(h))\nreturn out\n\n\nclass Transformer(nn.Module):\ndef __init__(self, params: ModelArgs):\nsuper().__init__()\nself.params = params\nself.vocab_size = params.vocab_size\nself.n_layers = params.n_layers\n\nself.tok_embeddings = VocabParallelEmbedding(\nparams.vocab_size, params.dim, init_method=lambda x: x\n)\n\nself.layers = torch.nn.ModuleList()\nfor layer_id in range(params.n_layers):\nself.layers.append(TransformerBlock(layer_id, params))\n\nself.norm = RMSNorm(params.dim, eps=params.norm_eps)\nself.output = ColumnParallelLinear(\nparams.dim, params.vocab_size, bias=False, init_method=lambda x: x\n)\n\nself.freqs_cis = precompute_freqs_cis(\nparams.dim // params.n_heads,\nparams.max_seq_len * 2,\nparams.rope_theta,\n)\n\n@torch.inference_mode()\ndef forward(self, tokens: torch.Tensor, start_pos: int):\n_bsz, seqlen = tokens.shape\nh = self.tok_embeddings(tokens)\nself.freqs_cis = self.freqs_cis.to(h.device)\nfreqs_cis = self.freqs_cis[start_pos : start_pos + seqlen]\n\nmask = None\nif seqlen > 1:\nmask = torch.full((seqlen, seqlen), float(\"-inf\"), device=tokens.device)\n\nmask = torch.triu(mask, diagonal=1)\n\n# When performing key-value caching, we compute the attention scores\n# only for the new sequence. Thus, the matrix of scores is of size\n# (seqlen, cache_len + seqlen), and the only masked entries are (i, j) for\n# j > cache_len + i, since row i corresponds to token cache_len + i.\nmask = torch.hstack(\n[torch.zeros((seqlen, start_pos), device=tokens.device), mask]\n).type_as(h)\n\nfor layer in self.layers:\nh = layer(h, start_pos, freqs_cis, mask)\nh = self.norm(h)\noutput = self.output(h).float()\nreturn output", "generation.py": "# Copyright (c) Meta Platforms, Inc. and affiliates.\n# This software may be used and distributed in accordance with the terms of the Llama 3 Community License Agreement.\n\nimport json\nimport os\nimport sys\nimport time\nfrom pathlib import Path\nfrom typing import List, Optional, Tuple, TypedDict\n\nimport torch\nimport torch.nn.functional as F\nfrom fairscale.nn.model_parallel.initialize import (\nget_model_parallel_rank,\ninitialize_model_parallel,\nmodel_parallel_is_initialized,\n)\n\nfrom llama.model import ModelArgs, Transformer\nfrom llama.tokenizer import ChatFormat, Dialog, Message, Tokenizer\n\n\nclass CompletionPrediction(TypedDict, total=False):\ngeneration: str\ntokens: List[str]  # not required\nlogprobs: List[float]  # not required\n\n\nclass ChatPrediction(TypedDict, total=False):\ngeneration: Message\ntokens: List[str]  # not required\nlogprobs: List[float]  # not required\n\n\nclass Llama:\n@staticmethod\ndef build(\nckpt_dir: str,\ntokenizer_path: str,\nmax_seq_len: int,\nmax_batch_size: int,\nmodel_parallel_size: Optional[int] = None,\nseed: int = 1,\n) -> \"Llama\":\n\"\"\"\nBuild a Llama instance by initializing and loading a model checkpoint.\n\nArgs:\nckpt_dir (str): Path to the directory containing checkpoint files.\ntokenizer_path (str): Path to the tokenizer file.\nmax_seq_len (int): Maximum sequence length for input text.\nmax_batch_size (int): Maximum batch size for inference.\nmodel_parallel_size (Optional[int], optional): Number of model parallel processes.\nIf not provided, it's determined from the environment. Defaults to None.\n\nReturns:\nLlama: An instance of the Llama class with the loaded model and tokenizer.\n\nRaises:\nAssertionError: If there are no checkpoint files in the specified directory,\nor if the model parallel size does not match the number of checkpoint files.\n\nNote:\nThis method initializes the distributed process group, sets the device to CUDA,\nand loads the pre-trained model and tokenizer.\n\"\"\"\nif not torch.distributed.is_initialized():\ntorch.distributed.init_process_group(\"nccl\")\nif not model_parallel_is_initialized():\nif model_parallel_size is None:\nmodel_parallel_size = int(os.environ.get(\"WORLD_SIZE\", 1))\ninitialize_model_parallel(model_parallel_size)\n\nlocal_rank = int(os.environ.get(\"LOCAL_RANK\", 0))\ntorch.cuda.set_device(local_rank)\n\n# seed must be the same in all processes\ntorch.manual_seed(seed)\n\nif local_rank > 0:\nsys.stdout = open(os.devnull, \"w\")\n\nstart_time = time.time()\ncheckpoints = sorted(Path(ckpt_dir).glob(\"*.pth\"))\nassert len(checkpoints) > 0, f\"no checkpoint files found in {ckpt_dir}\"\nassert model_parallel_size == len(\ncheckpoints\n), f\"Loading a checkpoint for MP={len(checkpoints)} but world size is {model_parallel_size}\"\nckpt_path = checkpoints[get_model_parallel_rank()]\ncheckpoint = torch.load(ckpt_path, map_location=\"cpu\")\nwith open(Path(ckpt_dir) / \"params.json\", \"r\") as f:\nparams = json.loads(f.read())\n\nmodel_args: ModelArgs = ModelArgs(\nmax_seq_len=max_seq_len,\nmax_batch_size=max_batch_size,\n**params,\n)\ntokenizer = Tokenizer(model_path=tokenizer_path)\nassert model_args.vocab_size == tokenizer.n_words\nif torch.cuda.is_bf16_supported():\ntorch.set_default_tensor_type(torch.cuda.BFloat16Tensor)\nelse:\ntorch.set_default_tensor_type(torch.cuda.HalfTensor)\nmodel = Transformer(model_args)\nmodel.load_state_dict(checkpoint, strict=False)\nprint(f\"Loaded in {time.time() - start_time:.2f} seconds\")\n\nreturn Llama(model, tokenizer)\n\ndef __init__(self, model: Transformer, tokenizer: Tokenizer):\nself.model = model\nself.tokenizer = tokenizer\nself.formatter = ChatFormat(tokenizer)\n\n@torch.inference_mode()\ndef generate(\nself,\nprompt_tokens: List[List[int]],\nmax_gen_len: int,\ntemperature: float = 0.6,\ntop_p: float = 0.9,\nlogprobs: bool = False,\necho: bool = False,\n) -> Tuple[List[List[int]], Optional[List[List[float]]]]:\n\"\"\"\nGenerate text sequences based on provided prompts using the language generation model.\n\nArgs:\nprompt_tokens (List[List[int]]): List of tokenized prompts, where each prompt is represented as a list of integers.\nmax_gen_len (int): Maximum length of the generated text sequence.\ntemperature (float, optional): Temperature value for controlling randomness in sampling. Defaults to 0.6.\ntop_p (float, optional): Top-p probability threshold for nucleus sampling. Defaults to 0.9.\nlogprobs (bool, optional): Flag indicating whether to compute token log probabilities. Defaults to False.\necho (bool, optional): Flag indicating whether to include prompt tokens in the generated output. Defaults to False.\n\nReturns:\nTuple[List[List[int]], Optional[List[List[float]]]]: A tuple containing generated token sequences and, if logprobs is True, corresponding token log probabilities.\n\nNote:\nThis method uses the provided prompts as a basis for generating text. It employs nucleus sampling to produce text with controlled randomness.\nIf logprobs is True, token log probabilities are computed for each generated token.\n\n\"\"\"\nparams = self.model.params\nbsz = len(prompt_tokens)\nassert bsz <= params.max_batch_size, (bsz, params.max_batch_size)\n\nmin_prompt_len = min(len(t) for t in prompt_tokens)\nmax_prompt_len = max(len(t) for t in prompt_tokens)\nassert max_prompt_len <= params.max_seq_len\ntotal_len = min(params.max_seq_len, max_gen_len + max_prompt_len)\n\npad_id = self.tokenizer.pad_id\ntokens = torch.full((bsz, total_len), pad_id, dtype=torch.long, device=\"cuda\")\nfor k, t in enumerate(prompt_tokens):\ntokens[k, : len(t)] = torch.tensor(t, dtype=torch.long, device=\"cuda\")\nif logprobs:\ntoken_logprobs = torch.zeros_like(tokens, dtype=torch.float)\n\nprev_pos = 0\neos_reached = torch.tensor([False] * bsz, device=\"cuda\")\ninput_text_mask = tokens != pad_id\nif min_prompt_len == total_len:\nlogits = self.model.forward(tokens, prev_pos)\ntoken_logprobs = -F.cross_entropy(\ninput=logits.transpose(1, 2),\ntarget=tokens,\nreduction=\"none\",\nignore_index=pad_id,\n)\n\nstop_tokens = torch.tensor(list(self.tokenizer.stop_tokens))\n\nfor cur_pos in range(min_prompt_len, total_len):\nlogits = self.model.forward(tokens[:, prev_pos:cur_pos], prev_pos)\nif temperature > 0:\nprobs = torch.softmax(logits[:, -1] / temperature, dim=-1)\nnext_token = sample_top_p(probs, top_p)\nelse:\nnext_token = torch.argmax(logits[:, -1], dim=-1)\n\nnext_token = next_token.reshape(-1)\n# only replace token if prompt has already been generated\nnext_token = torch.where(\ninput_text_mask[:, cur_pos], tokens[:, cur_pos], next_token\n)\ntokens[:, cur_pos] = next_token\nif logprobs:\ntoken_logprobs[:, prev_pos + 1 : cur_pos + 1] = -F.cross_entropy(\ninput=logits.transpose(1, 2),\ntarget=tokens[:, prev_pos + 1 : cur_pos + 1],\nreduction=\"none\",\nignore_index=pad_id,\n)\neos_reached |= (~input_text_mask[:, cur_pos]) & (\ntorch.isin(next_token, stop_tokens)\n)\nprev_pos = cur_pos\nif all(eos_reached):\nbreak\n\nif logprobs:\ntoken_logprobs = token_logprobs.tolist()\nout_tokens, out_logprobs = [], []\nfor i, toks in enumerate(tokens.tolist()):\n# cut to max gen len\nstart = 0 if echo else len(prompt_tokens[i])\ntoks = toks[start : len(prompt_tokens[i]) + max_gen_len]\nprobs = None\nif logprobs:\nprobs = token_logprobs[i][start : len(prompt_tokens[i]) + max_gen_len]\n# cut to after eos tok if any\nfor stop_token in self.tokenizer.stop_tokens:\ntry:\neos_idx = toks.index(stop_token)\ntoks = toks[:eos_idx]\nprobs = probs[:eos_idx] if logprobs else None\nexcept ValueError:\npass\nout_tokens.append(toks)\nout_logprobs.append(probs)\nreturn (out_tokens, out_logprobs if logprobs else None)\n\ndef text_completion(\nself,\nprompts: List[str],\ntemperature: float = 0.6,\ntop_p: float = 0.9,\nmax_gen_len: Optional[int] = None,\nlogprobs: bool = False,\necho: bool = False,\n) -> List[CompletionPrediction]:\n\"\"\"\nPerform text completion for a list of prompts using the language generation model.\n\nArgs:\nprompts (List[str]): List of text prompts for completion.\ntemperature (float, optional): Temperature value for controlling randomness in sampling. Defaults to 0.6.\ntop_p (float, optional): Top-p probability threshold for nucleus sampling. Defaults to 0.9.\nmax_gen_len (Optional[int], optional): Maximum length of the generated completion sequence.\nIf not provided, it's set to the model's maximum sequence length minus 1.\nlogprobs (bool, optional): Flag indicating whether to compute token log probabilities. Defaults to False.\necho (bool, optional): Flag indicating whether to include prompt tokens in the generated output. Defaults to False.\n\nReturns:\nList[CompletionPrediction]: List of completion predictions, each containing the generated text completion.\n\nNote:\nThis method generates text completions for the provided prompts, employing nucleus sampling to introduce controlled randomness.\nIf logprobs is True, token log probabilities are computed for each generated token.\n\n\"\"\"\nif max_gen_len is None:\nmax_gen_len = self.model.params.max_seq_len - 1\nprompt_tokens = [self.tokenizer.encode(x, bos=True, eos=False) for x in prompts]\ngeneration_tokens, generation_logprobs = self.generate(\nprompt_tokens=prompt_tokens,\nmax_gen_len=max_gen_len,\ntemperature=temperature,\ntop_p=top_p,\nlogprobs=logprobs,\necho=echo,\n)\nif logprobs:\nreturn [\n{\n\"generation\": self.tokenizer.decode(t),\n\"tokens\": [self.tokenizer.decode([x]) for x in t],\n\"logprobs\": logprobs_i,\n}\nfor t, logprobs_i in zip(generation_tokens, generation_logprobs)\n]\nreturn [{\"generation\": self.tokenizer.decode(t)} for t in generation_tokens]\n\ndef chat_completion(\nself,\ndialogs: List[Dialog],\ntemperature: float = 0.6,\ntop_p: float = 0.9,\nmax_gen_len: Optional[int] = None,\nlogprobs: bool = False,\n) -> List[ChatPrediction]:\n\"\"\"\nGenerate assistant responses for a list of conversational dialogs using the language generation model.\n\nArgs:\ndialogs (List[Dialog]): List of conversational dialogs, where each dialog is a list of messages.\ntemperature (float, optional): Temperature value for controlling randomness in sampling. Defaults to 0.6.\ntop_p (float, optional): Top-p probability threshold for nucleus sampling. Defaults to 0.9.\nmax_gen_len (Optional[int], optional): Maximum length of the generated response sequence.\nIf not provided, it's set to the model's maximum sequence length minus 1.\nlogprobs (bool, optional): Flag indicating whether to compute token log probabilities. Defaults to False.\n\nReturns:\nList[ChatPrediction]: List of chat predictions, each containing the assistant's generated response.\n\nNote:\nThis method generates assistant responses for the provided conversational dialogs.\nIt employs nucleus sampling to introduce controlled randomness in text generation.\nIf logprobs is True, token log probabilities are computed for each generated token.\n\"\"\"\nif max_gen_len is None:\nmax_gen_len = self.model.params.max_seq_len - 1\n\nprompt_tokens = [\nself.formatter.encode_dialog_prompt(dialog) for dialog in dialogs\n]\ngeneration_tokens, generation_logprobs = self.generate(\nprompt_tokens=prompt_tokens,\nmax_gen_len=max_gen_len,\ntemperature=temperature,\ntop_p=top_p,\nlogprobs=logprobs,\n)\nif logprobs:\nreturn [\n{\n\"generation\": {\n\"role\": \"assistant\",\n\"content\": self.tokenizer.decode(t),\n},\n\"tokens\": [self.tokenizer.decode([x]) for x in t],\n\"logprobs\": logprobs_i,\n}\nfor t, logprobs_i in zip(generation_tokens, generation_logprobs)\n]\nreturn [\n{\n\"generation\": {\n\"role\": \"assistant\",\n\"content\": self.tokenizer.decode(t),\n},\n}\nfor t in generation_tokens\n]\n\n\ndef sample_top_p(probs, p):\n\"\"\"\nPerform top-p (nucleus) sampling on a probability distribution.\n\nArgs:\nprobs (torch.Tensor): Probability distribution tensor.\np (float): Probability threshold for top-p sampling.\n\nReturns:\ntorch.Tensor: Sampled token indices.\n\nNote:\nTop-p sampling selects the smallest set of tokens whose cumulative probability mass\nexceeds the threshold p. The distribution is renormalized based on the selected tokens.\n\"\"\"\nprobs_sort, probs_idx = torch.sort(probs, dim=-1, descending=True)\nprobs_sum = torch.cumsum(probs_sort, dim=-1)\nmask = probs_sum - probs_sort > p\nprobs_sort[mask] = 0.0\nprobs_sort.div_(probs_sort.sum(dim=-1, keepdim=True))\nnext_token = torch.multinomial(probs_sort, num_samples=1)\nnext_token = torch.gather(probs_idx, -1, next_token)\nreturn next_token", "requirements.txt": "torch\nfairscale\nfire\ntiktoken==0.4.0\nblobfile"}}, {"BlockHeight": 2, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "fc2e88f6f848fa617dd3d556b3d8aa71dc6524e9e8c04d322cfdef6e03eb1c0c", "merkleRoot": "", "timestamp": 1713790491, "blockHash": "f9e2658ec9c888229a460670c34d877515f5454d93d0af24d31cfddc3f021bf7"}, "Parameters": [], "code": null}, {"BlockHeight": 3, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "f9e2658ec9c888229a460670c34d877515f5454d93d0af24d31cfddc3f021bf7", "merkleRoot": "", "timestamp": 1713790491, "blockHash": "b0faf2fbadde8bd2edde3b8f486f5f95b49439e582cdacf6680c997ceb73e1d4"}, "Parameters": [], "code": null}, {"BlockHeight": 4, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "b0faf2fbadde8bd2edde3b8f486f5f95b49439e582cdacf6680c997ceb73e1d4", "merkleRoot": "", "timestamp": 1713790491, "blockHash": "e312e0283a21278e854437479dff7af5b8904d366848b4a7365fd0a4a3343d3f"}, "Parameters": [], "code": null}, {"BlockHeight": 5, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "e312e0283a21278e854437479dff7af5b8904d366848b4a7365fd0a4a3343d3f", "merkleRoot": "", "timestamp": 1713790491, "blockHash": "f1eeb385c92dae63a5600fce8a09cf24caf17506d05afc496e1ca77dc0b047f0"}, "Parameters": [], "code": null}, {"BlockHeight": 6, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "f1eeb385c92dae63a5600fce8a09cf24caf17506d05afc496e1ca77dc0b047f0", "merkleRoot": "", "timestamp": 1713790491, "blockHash": "98d1b7933eb42c36b53cb59f621b52cf89511bb2b5d857afbbbc3a1b97865641"}, "Parameters": [], "code": null}, {"BlockHeight": 7, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "98d1b7933eb42c36b53cb59f621b52cf89511bb2b5d857afbbbc3a1b97865641", "merkleRoot": "", "timestamp": 1713790491, "blockHash": "86c16563284610f4df944f57dbc929ded7505e7b6f78724f52003c405c118286"}, "Parameters": [], "code": null}, {"BlockHeight": 8, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "86c16563284610f4df944f57dbc929ded7505e7b6f78724f52003c405c118286", "merkleRoot": "", "timestamp": 1713790491, "blockHash": "61a08a6e711c9e44cd0b58981ab65bca62334e93bc28dce3040b552db3785c84"}, "Parameters": [], "code": null}, {"BlockHeight": 9, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "61a08a6e711c9e44cd0b58981ab65bca62334e93bc28dce3040b552db3785c84", "merkleRoot": "", "timestamp": 1713790491, "blockHash": "77ad64448a5868e7dbc3089b0810c5cbcb725738161f9703026d3449e151a071"}, "Parameters": [], "code": null}, {"BlockHeight": 10, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "77ad64448a5868e7dbc3089b0810c5cbcb725738161f9703026d3449e151a071", "merkleRoot": "", "timestamp": 1713790491, "blockHash": "c80592fc8a481a7b0ecc533d00f13421176fd33766520c8a9a9f037bed449a8d"}, "Parameters": [], "code": null}, {"BlockHeight": 11, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "c80592fc8a481a7b0ecc533d00f13421176fd33766520c8a9a9f037bed449a8d", "merkleRoot": "", "timestamp": 1713790491, "blockHash": "dfbb2a2cd88e3ae8c82059f8dcb39afafbff36765f57ca6b940dd1de6e727c60"}, "Parameters": [], "code": null}, {"BlockHeight": 12, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "dfbb2a2cd88e3ae8c82059f8dcb39afafbff36765f57ca6b940dd1de6e727c60", "merkleRoot": "", "timestamp": 1713790491, "blockHash": "f83ed60b0367f5436047537cde766b5bea44c47a5f8dd3d1fb0b2d505935d399"}, "Parameters": [], "code": null}, {"BlockHeight": 13, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "f83ed60b0367f5436047537cde766b5bea44c47a5f8dd3d1fb0b2d505935d399", "merkleRoot": "", "timestamp": 1713790491, "blockHash": "5b0fe51e0e547441215e17ad50de26158b81acb66c1a4188a0a12fab70f15dae"}, "Parameters": [], "code": null}, {"BlockHeight": 14, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "5b0fe51e0e547441215e17ad50de26158b81acb66c1a4188a0a12fab70f15dae", "merkleRoot": "", "timestamp": 1713790491, "blockHash": "4787299f1c6ed5e3c4f1edc3cbb212650e45be2676b3d4d07ac12f1bf45c5a45"}, "Parameters": [], "code": null}, {"BlockHeight": 15, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "4787299f1c6ed5e3c4f1edc3cbb212650e45be2676b3d4d07ac12f1bf45c5a45", "merkleRoot": "", "timestamp": 1713790491, "blockHash": "3786102aeaf79147bee275c4ed001404c5c42b98b8b9840132e671d7e7193f48"}, "Parameters": [], "code": null}, {"BlockHeight": 16, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "3786102aeaf79147bee275c4ed001404c5c42b98b8b9840132e671d7e7193f48", "merkleRoot": "", "timestamp": 1713790491, "blockHash": "681d058651a7234e8323eb52b3aae45cae6b1884bd712913f346fabecd49dccb"}, "Parameters": [], "code": null}, {"BlockHeight": 17, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "681d058651a7234e8323eb52b3aae45cae6b1884bd712913f346fabecd49dccb", "merkleRoot": "", "timestamp": 1713790491, "blockHash": "8b66c79efd638f8664a20c1f4ff562bdf8951781ea13813263376887044e6a36"}, "Parameters": [], "code": null}, {"BlockHeight": 18, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "8b66c79efd638f8664a20c1f4ff562bdf8951781ea13813263376887044e6a36", "merkleRoot": "", "timestamp": 1713790491, "blockHash": "db80aa9a153f4b85e70eb5bc2de72f6892555424f5972a977c910818001c9cf7"}, "Parameters": [], "code": null}, {"BlockHeight": 19, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "db80aa9a153f4b85e70eb5bc2de72f6892555424f5972a977c910818001c9cf7", "merkleRoot": "", "timestamp": 1713790491, "blockHash": "200fb6a68c14460be050199d99a04332cecf0e8e6339344728721485629d2499"}, "Parameters": [], "code": null}, {"BlockHeight": 20, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "200fb6a68c14460be050199d99a04332cecf0e8e6339344728721485629d2499", "merkleRoot": "", "timestamp": 1713790491, "blockHash": "4123433b2a08e14bfaf1342bb2136654cda103247b4f505b7fb2c5bb11966d1a"}, "Parameters": [], "code": null}, {"BlockHeight": 21, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "4123433b2a08e14bfaf1342bb2136654cda103247b4f505b7fb2c5bb11966d1a", "merkleRoot": "", "timestamp": 1713790491, "blockHash": "b419452ab37b8640bb37b86af8855fd8e6200af770a39032c05e48ff14a6ae18"}, "Parameters": [], "code": null}, {"BlockHeight": 22, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "b419452ab37b8640bb37b86af8855fd8e6200af770a39032c05e48ff14a6ae18", "merkleRoot": "", "timestamp": 1713790491, "blockHash": "f5e840d8de1f381e601482c3e19ccf35a3f6c4b41852e6dca81be524d410cba6"}, "Parameters": [], "code": null}, {"BlockHeight": 23, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "f5e840d8de1f381e601482c3e19ccf35a3f6c4b41852e6dca81be524d410cba6", "merkleRoot": "", "timestamp": 1713790491, "blockHash": "9d9604d3ca444047b791740241232ba424801721b37a76048b3140fee4352dfc"}, "Parameters": [], "code": null}, {"BlockHeight": 24, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "9d9604d3ca444047b791740241232ba424801721b37a76048b3140fee4352dfc", "merkleRoot": "", "timestamp": 1713790491, "blockHash": "866111566f900be638d4459d43ec2c933887696ea18d8640a94bb4e9c5c6e4c6"}, "Parameters": [], "code": null}, {"BlockHeight": 25, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "866111566f900be638d4459d43ec2c933887696ea18d8640a94bb4e9c5c6e4c6", "merkleRoot": "", "timestamp": 1713790491, "blockHash": "ea9e44239edf1ef30ceb60e69430088192f110b86e63337ddfbae94c695aa051"}, "Parameters": [], "code": null}, {"BlockHeight": 26, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "ea9e44239edf1ef30ceb60e69430088192f110b86e63337ddfbae94c695aa051", "merkleRoot": "", "timestamp": 1713790491, "blockHash": "1d373df537fd99178ffcc63aca7376570bac2d9d35a0e6a5c82eb771570c0472"}, "Parameters": [], "code": null}, {"BlockHeight": 27, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "1d373df537fd99178ffcc63aca7376570bac2d9d35a0e6a5c82eb771570c0472", "merkleRoot": "", "timestamp": 1713790491, "blockHash": "3ec50b720f75c9244fa52fa8d9c67f3282df613516295a76db76a049e14becd1"}, "Parameters": [], "code": null}, {"BlockHeight": 28, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "3ec50b720f75c9244fa52fa8d9c67f3282df613516295a76db76a049e14becd1", "merkleRoot": "", "timestamp": 1713790491, "blockHash": "dc323badd2bcd33a1584f5681d3931330a947b3af6fcaf4e83a351130ddce81d"}, "Parameters": [], "code": null}, {"BlockHeight": 29, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "dc323badd2bcd33a1584f5681d3931330a947b3af6fcaf4e83a351130ddce81d", "merkleRoot": "", "timestamp": 1713790491, "blockHash": "80e6fd68ff2e929b875501bc00176bec351b77dfad0da1878d81936c91f741ef"}, "Parameters": [], "code": null}, {"BlockHeight": 30, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "80e6fd68ff2e929b875501bc00176bec351b77dfad0da1878d81936c91f741ef", "merkleRoot": "", "timestamp": 1713790491, "blockHash": "5420177f706b5c5604c889630c71aa20d39fa10c257ebcb3b74d2964eb897e2f"}, "Parameters": [], "code": null}, {"BlockHeight": 31, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "5420177f706b5c5604c889630c71aa20d39fa10c257ebcb3b74d2964eb897e2f", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "a457e0f1916c526f3bfba516632c4eba8186934a14a6c2bb45f69bd025f8567f"}, "Parameters": [], "code": null}, {"BlockHeight": 32, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "a457e0f1916c526f3bfba516632c4eba8186934a14a6c2bb45f69bd025f8567f", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "729ec9f7684963c0f6b85bd3f6c4fca8ea603b8393aa05eeff3436c6ecaafe0c"}, "Parameters": [], "code": null}, {"BlockHeight": 33, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "729ec9f7684963c0f6b85bd3f6c4fca8ea603b8393aa05eeff3436c6ecaafe0c", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "0ad05591d4d3a60f15d6f8a4e6a20a792f3caf1034b11f97dac28d32ae399741"}, "Parameters": [], "code": null}, {"BlockHeight": 34, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "0ad05591d4d3a60f15d6f8a4e6a20a792f3caf1034b11f97dac28d32ae399741", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "7bf129b81e511c97091f57f50f0d800cd776435c4d68e1d420e1c82b967bb157"}, "Parameters": [], "code": null}, {"BlockHeight": 35, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "7bf129b81e511c97091f57f50f0d800cd776435c4d68e1d420e1c82b967bb157", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "de9788c418ecdaf5f1a90d3b2b7cce3211c07060452cd233c6d207b5fd5d7710"}, "Parameters": [], "code": null}, {"BlockHeight": 36, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "de9788c418ecdaf5f1a90d3b2b7cce3211c07060452cd233c6d207b5fd5d7710", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "c1b281a6af2109d91cfa014b9f522b8bb7a412fc037543e2f3ba384a3bb6ebcd"}, "Parameters": [], "code": null}, {"BlockHeight": 37, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "c1b281a6af2109d91cfa014b9f522b8bb7a412fc037543e2f3ba384a3bb6ebcd", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "4b41518beed8c11c8ffc01a7b1caf777c11725bb95002ce20378e4a1683a9cd9"}, "Parameters": [], "code": null}, {"BlockHeight": 38, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "4b41518beed8c11c8ffc01a7b1caf777c11725bb95002ce20378e4a1683a9cd9", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "c76fa9de51842160fe7b22bd51b07fd29608fdd6284049b1d3039a044ce9abf2"}, "Parameters": [], "code": null}, {"BlockHeight": 39, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "c76fa9de51842160fe7b22bd51b07fd29608fdd6284049b1d3039a044ce9abf2", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "b6eb33942567cea8e2b0b52ecbd6576109cbf8addba84002c4179c8b37da8a0b"}, "Parameters": [], "code": null}, {"BlockHeight": 40, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "b6eb33942567cea8e2b0b52ecbd6576109cbf8addba84002c4179c8b37da8a0b", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "fd6ac4ae2a89f6ebdab1cd7a2fa74e86d8882dd87be142b15c7ed59ca3ae0e0f"}, "Parameters": [], "code": null}, {"BlockHeight": 41, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "fd6ac4ae2a89f6ebdab1cd7a2fa74e86d8882dd87be142b15c7ed59ca3ae0e0f", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "c28013a36e4d687dccdf2b4ba37bdafd62813b8a315d4634ed30068bec3342ba"}, "Parameters": [], "code": null}, {"BlockHeight": 42, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "c28013a36e4d687dccdf2b4ba37bdafd62813b8a315d4634ed30068bec3342ba", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "c5e9ee787a71f28fe884c87a585b9f99951ea43f1297004c4b60cd46c0048bf2"}, "Parameters": [], "code": null}, {"BlockHeight": 43, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "c5e9ee787a71f28fe884c87a585b9f99951ea43f1297004c4b60cd46c0048bf2", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "5391ca178ec8e83cb988ff5110e7fb88abed34c48841c30c11faf618e3aad3eb"}, "Parameters": [], "code": null}, {"BlockHeight": 44, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "5391ca178ec8e83cb988ff5110e7fb88abed34c48841c30c11faf618e3aad3eb", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "ad0d15bebefcb912658b6c9a7db637f53cb9f4a2f157e93e56b943703a06bc78"}, "Parameters": [], "code": null}, {"BlockHeight": 45, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "ad0d15bebefcb912658b6c9a7db637f53cb9f4a2f157e93e56b943703a06bc78", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "93dc1fde0da23e0dba55eb6d07f3bbc366d963965df6643627209d607a0c9a08"}, "Parameters": [], "code": null}, {"BlockHeight": 46, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "93dc1fde0da23e0dba55eb6d07f3bbc366d963965df6643627209d607a0c9a08", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "cb65eca553f8ffb3ff4ba6d72d9dac782a87c3deda87db511a19dcb17de9976f"}, "Parameters": [], "code": null}, {"BlockHeight": 47, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "cb65eca553f8ffb3ff4ba6d72d9dac782a87c3deda87db511a19dcb17de9976f", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "375e43282b484264a7de6b339f0d815d47a07fe6d68160de7ceb1f1328121aeb"}, "Parameters": [], "code": null}, {"BlockHeight": 48, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "375e43282b484264a7de6b339f0d815d47a07fe6d68160de7ceb1f1328121aeb", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "087ffdffa5a1a79e5343b8c69724dddf9226ac5c560313d65d28a22317e3c674"}, "Parameters": [], "code": null}, {"BlockHeight": 49, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "087ffdffa5a1a79e5343b8c69724dddf9226ac5c560313d65d28a22317e3c674", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "9c31fa2be3ff35ba6e6a7be162422cf569f2fd9d03bf8e0b4a0c320b020b92ea"}, "Parameters": [], "code": null}, {"BlockHeight": 50, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "9c31fa2be3ff35ba6e6a7be162422cf569f2fd9d03bf8e0b4a0c320b020b92ea", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "0ee3d9403187fc850774bfbedf46804f7ae69f487d9fa5ae36996863c9d27ffa"}, "Parameters": [], "code": null}, {"BlockHeight": 51, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "0ee3d9403187fc850774bfbedf46804f7ae69f487d9fa5ae36996863c9d27ffa", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "b48ddc164aa17cc9e0d5544c1a8ddb42174f3aa153044937a6d907a6fe245b36"}, "Parameters": [], "code": null}, {"BlockHeight": 52, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "b48ddc164aa17cc9e0d5544c1a8ddb42174f3aa153044937a6d907a6fe245b36", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "5ab14c0f3fdc431549f09300e3a48d1cd2a94d4c813ffab74300fd4d053ba021"}, "Parameters": [], "code": null}, {"BlockHeight": 53, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "5ab14c0f3fdc431549f09300e3a48d1cd2a94d4c813ffab74300fd4d053ba021", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "c84b7f20cb047192c0e1cac296b746acd048da5d52aa8d56b88c262004a70306"}, "Parameters": [], "code": null}, {"BlockHeight": 54, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "c84b7f20cb047192c0e1cac296b746acd048da5d52aa8d56b88c262004a70306", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "1aa5ddd7d473c5b031ca10d51a0ff8af1554d43a9fa3d2eb8e95557986ec5aa7"}, "Parameters": [], "code": null}, {"BlockHeight": 55, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "1aa5ddd7d473c5b031ca10d51a0ff8af1554d43a9fa3d2eb8e95557986ec5aa7", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "999ba4fda3493ba30f34b8c6ab6409124c9e890705f27530be464029b395c24c"}, "Parameters": [], "code": null}, {"BlockHeight": 56, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "999ba4fda3493ba30f34b8c6ab6409124c9e890705f27530be464029b395c24c", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "4e6ff4229bc19f4c0672cdf05cfdc7877a468723df3a293e59d2900bb539752e"}, "Parameters": [], "code": null}, {"BlockHeight": 57, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "4e6ff4229bc19f4c0672cdf05cfdc7877a468723df3a293e59d2900bb539752e", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "060d1430b06ad52fcbc3c11b54dcbc7fcc9d11c3626fb29fe230e05e84dcc2e6"}, "Parameters": [], "code": null}, {"BlockHeight": 58, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "060d1430b06ad52fcbc3c11b54dcbc7fcc9d11c3626fb29fe230e05e84dcc2e6", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "867483ca93e4338c84f090ffb9faec27c8074c990437517173ebf60bbdbad14a"}, "Parameters": [], "code": null}, {"BlockHeight": 59, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "867483ca93e4338c84f090ffb9faec27c8074c990437517173ebf60bbdbad14a", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "741786cf5f9aff4d6b7a7b20d029b3cf52adf3142d42db6c75061ede65291650"}, "Parameters": [], "code": null}, {"BlockHeight": 60, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "741786cf5f9aff4d6b7a7b20d029b3cf52adf3142d42db6c75061ede65291650", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "40b00314f9364d296ef558e61c9af3b4e4bbdedd5e906a7b04413c4c516deeba"}, "Parameters": [], "code": null}, {"BlockHeight": 61, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "40b00314f9364d296ef558e61c9af3b4e4bbdedd5e906a7b04413c4c516deeba", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "fc52d92d820f0f19557c821371c05090938b4e5448cb8fceb84e75290393a8db"}, "Parameters": [], "code": null}, {"BlockHeight": 62, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "fc52d92d820f0f19557c821371c05090938b4e5448cb8fceb84e75290393a8db", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "af2a0c931c061e36c736f3254c84d54e133dcb36fbdaba2192f5138d0aa4da12"}, "Parameters": [], "code": null}, {"BlockHeight": 63, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "af2a0c931c061e36c736f3254c84d54e133dcb36fbdaba2192f5138d0aa4da12", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "1f429049131780416625b6588699b1fdeab29c2b223066ae88844e3523c0a223"}, "Parameters": [], "code": null}, {"BlockHeight": 64, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "1f429049131780416625b6588699b1fdeab29c2b223066ae88844e3523c0a223", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "4c57d15fa9f85a498cd7e2cfc6bb5565eb6c948a52041818f622a95e89b52c23"}, "Parameters": [], "code": null}, {"BlockHeight": 65, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "4c57d15fa9f85a498cd7e2cfc6bb5565eb6c948a52041818f622a95e89b52c23", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "2789dc03fefc0042731da68d19697ceedb02e9f12d98dcefa96da52bb3c61252"}, "Parameters": [], "code": null}, {"BlockHeight": 66, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "2789dc03fefc0042731da68d19697ceedb02e9f12d98dcefa96da52bb3c61252", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "b62e7b71b58129729cabf70ed4a9666421554525c6fd76a2befc0f49c2e541ec"}, "Parameters": [], "code": null}, {"BlockHeight": 67, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "b62e7b71b58129729cabf70ed4a9666421554525c6fd76a2befc0f49c2e541ec", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "dbdf5ddc8c95ba84dde03a4f847004d13141faa5c8cc4a1b44e9f7530dc5ba6b"}, "Parameters": [], "code": null}, {"BlockHeight": 68, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "dbdf5ddc8c95ba84dde03a4f847004d13141faa5c8cc4a1b44e9f7530dc5ba6b", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "ccc32c0589d91a4179802f196648d5dfa9d08571e24a39b4c22e7858c0968180"}, "Parameters": [], "code": null}, {"BlockHeight": 69, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "ccc32c0589d91a4179802f196648d5dfa9d08571e24a39b4c22e7858c0968180", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "e039612a2ca19f3f5d39691e9b54293bb9b9613b3673b54223b37f8cb2be5692"}, "Parameters": [], "code": null}, {"BlockHeight": 70, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "e039612a2ca19f3f5d39691e9b54293bb9b9613b3673b54223b37f8cb2be5692", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "73de4a06aea11f051261c5852b5a703fd425594867a17e7ab2447b2d4c8c92cb"}, "Parameters": [], "code": null}, {"BlockHeight": 71, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "73de4a06aea11f051261c5852b5a703fd425594867a17e7ab2447b2d4c8c92cb", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "2ced6a4db64e1a1a319e176e03313734b4dd4f1e835199c50b4f04d976b708ef"}, "Parameters": [], "code": null}, {"BlockHeight": 72, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "2ced6a4db64e1a1a319e176e03313734b4dd4f1e835199c50b4f04d976b708ef", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "b539e5364733fe8db8e88d83e753bc47a82b5dc2218b694dd2c9385c3721802c"}, "Parameters": [], "code": null}, {"BlockHeight": 73, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "b539e5364733fe8db8e88d83e753bc47a82b5dc2218b694dd2c9385c3721802c", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "4035e19228630d59f2c5985093f64a865b9759bd30b9fc64b22e778ba83ee7da"}, "Parameters": [], "code": null}, {"BlockHeight": 74, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "4035e19228630d59f2c5985093f64a865b9759bd30b9fc64b22e778ba83ee7da", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "fab60ab57bd7d83585226a6af2f2e9a9e352dbe2d988233b9535e0a03439f641"}, "Parameters": [], "code": null}, {"BlockHeight": 75, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "fab60ab57bd7d83585226a6af2f2e9a9e352dbe2d988233b9535e0a03439f641", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "079d2307ca69a2da856abc4dd744393bddf28ec5459c2091261c485ad3d9250e"}, "Parameters": [], "code": null}, {"BlockHeight": 76, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "079d2307ca69a2da856abc4dd744393bddf28ec5459c2091261c485ad3d9250e", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "304046d765879bcc669a62c982ba067f061154e6eedbf997a422d1b19bf4f7ab"}, "Parameters": [], "code": null}, {"BlockHeight": 77, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "304046d765879bcc669a62c982ba067f061154e6eedbf997a422d1b19bf4f7ab", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "37797c6ed103325b253fa058f7c4b0abce11ac1ca911e59c37b2e46b49d4562e"}, "Parameters": [], "code": null}, {"BlockHeight": 78, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "37797c6ed103325b253fa058f7c4b0abce11ac1ca911e59c37b2e46b49d4562e", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "c6b54713d4065b09b2772931670292dcab97d58603da01bca2ccd2bb8c8c6cf4"}, "Parameters": [], "code": null}, {"BlockHeight": 79, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "c6b54713d4065b09b2772931670292dcab97d58603da01bca2ccd2bb8c8c6cf4", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "103fef82250b9efeb4dfa5e7a126cd37673ea90be5d47f04bda7cfb128dfe329"}, "Parameters": [], "code": null}, {"BlockHeight": 80, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "103fef82250b9efeb4dfa5e7a126cd37673ea90be5d47f04bda7cfb128dfe329", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "60e656327151b5db371b18333817b4a97f3493832895ee2237c9a5be859126ad"}, "Parameters": [], "code": null}, {"BlockHeight": 81, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "60e656327151b5db371b18333817b4a97f3493832895ee2237c9a5be859126ad", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "8f858874b0f6eafac0153c218faaa591a126f0e4f042bd60dc3031dd0fa2b566"}, "Parameters": [], "code": null}, {"BlockHeight": 82, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "8f858874b0f6eafac0153c218faaa591a126f0e4f042bd60dc3031dd0fa2b566", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "05f4fb82c1300f88ec7d531c623aa82c6bf298b80f1d33aa7414274425c5a67c"}, "Parameters": [], "code": null}, {"BlockHeight": 83, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "05f4fb82c1300f88ec7d531c623aa82c6bf298b80f1d33aa7414274425c5a67c", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "b10908e777e6a9199aacb3116399c4a032d28bad82c53118ecf53a1ab4b3a3b5"}, "Parameters": [], "code": null}, {"BlockHeight": 84, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "b10908e777e6a9199aacb3116399c4a032d28bad82c53118ecf53a1ab4b3a3b5", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "c2cac09dbbbcc52964f13942422a184aaf2059a99905464439341873f9ed258f"}, "Parameters": [], "code": null}, {"BlockHeight": 85, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "c2cac09dbbbcc52964f13942422a184aaf2059a99905464439341873f9ed258f", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "c58f1b0c05307ca0923b977ad7bfebf68059a89431199ecf8cbd55a43877e83f"}, "Parameters": [], "code": null}, {"BlockHeight": 86, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "c58f1b0c05307ca0923b977ad7bfebf68059a89431199ecf8cbd55a43877e83f", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "68b54b366eab141feab35a9b19dbf49bfac7e738eb41d05c9627ecf6f85a2b4e"}, "Parameters": [], "code": null}, {"BlockHeight": 87, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "68b54b366eab141feab35a9b19dbf49bfac7e738eb41d05c9627ecf6f85a2b4e", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "57ef75363684ad267c2681b7475f3ffc064a7c5a7caf860a91008060e7f4bc29"}, "Parameters": [], "code": null}, {"BlockHeight": 88, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "57ef75363684ad267c2681b7475f3ffc064a7c5a7caf860a91008060e7f4bc29", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "1d4e9db52c4bb37e5af256441513afcc1ab8fd595bce5ae666741f9a45539a44"}, "Parameters": [], "code": null}, {"BlockHeight": 89, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "1d4e9db52c4bb37e5af256441513afcc1ab8fd595bce5ae666741f9a45539a44", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "bb5c7bb746b97d804fa173c3f6a8c1301595fa0daba59f5cf1dbdf8cac4e9147"}, "Parameters": [], "code": null}, {"BlockHeight": 90, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "bb5c7bb746b97d804fa173c3f6a8c1301595fa0daba59f5cf1dbdf8cac4e9147", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "7a80a8ed6f629b71eeb5f44177980e731d580ad83264e4144a001f9626d44850"}, "Parameters": [], "code": null}, {"BlockHeight": 91, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "7a80a8ed6f629b71eeb5f44177980e731d580ad83264e4144a001f9626d44850", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "1acf78faf8964d8f6e3d12a5b515ebbbc9725107d8150c8607c33e48a523a93b"}, "Parameters": [], "code": null}, {"BlockHeight": 92, "Blocksize": 80, "BlockHeader": {"version": 1, "prevBlockHash": "1acf78faf8964d8f6e3d12a5b515ebbbc9725107d8150c8607c33e48a523a93b", "merkleRoot": "", "timestamp": 1713790492, "blockHash": "1a1d41aafe6cab3f89198bb2c04fda032111753b4fbbcad46a255c59f52429fa"}, "Parameters": [], "code": null}]